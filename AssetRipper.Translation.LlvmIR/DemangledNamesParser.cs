//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/repos/AssetRipper.Translation.LlvmIR/AssetRipper.Translation.LlvmIR/DemangledNames.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AssetRipper.Translation.LlvmIR {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DemangledNamesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, Bool=4, CDecl=5, CLRCall=6, Char=7, Class=8, Const=9, 
		DeclTypeAuto=10, Enum=11, FastCall=12, Float=13, Int=14, Int64=15, Long=16, 
		ScalarDeletingDestructor=17, Short=18, Signed=19, Static=20, StdCall=21, 
		Struct=22, ThisCall=23, Union=24, Unsigned=25, VectorCall=26, Virtual=27, 
		Void=28, LeftParen=29, RightParen=30, Less=31, Greater=32, Star=33, And=34, 
		Tilde=35, Colon=36, Comma=37, BackTick=38, SingleQuote=39, DoubleQuote=40, 
		LeftBrace=41, RightBrace=42, LeftBracket=43, RightBracket=44, Identifier=45, 
		Number=46, Whitespace=47, Newline=48;
	public const int
		RULE_function = 0, RULE_functionPrefix = 1, RULE_functionSuffix = 2, RULE_functionReturnType = 3, 
		RULE_functionDeclaringScope = 4, RULE_functionParameter = 5, RULE_functionParameters = 6, 
		RULE_templaceParameter = 7, RULE_template = 8, RULE_templateNotNull = 9, 
		RULE_functionName = 10, RULE_functionIdentifier = 11, RULE_type = 12, 
		RULE_typeIdentifier = 13, RULE_accessModifier = 14, RULE_vcSpecificModifer = 15, 
		RULE_numericType = 16, RULE_integerType = 17;
	public static readonly string[] ruleNames = {
		"function", "functionPrefix", "functionSuffix", "functionReturnType", 
		"functionDeclaringScope", "functionParameter", "functionParameters", "templaceParameter", 
		"template", "templateNotNull", "functionName", "functionIdentifier", "type", 
		"typeIdentifier", "accessModifier", "vcSpecificModifer", "numericType", 
		"integerType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'public'", "'protected'", "'private'", "'bool'", "'__cdecl'", "'__clrcall'", 
		"'char'", "'class'", "'const'", "'decltype(auto)'", "'enum'", "'__fastcall'", 
		"'float'", "'int'", "'__int64'", "'long'", "'`scalar deleting dtor''", 
		"'short'", "'signed'", "'static'", "'__stdcall'", "'struct'", "'__thiscall'", 
		"'union'", "'unsigned'", "'__vectorcall'", "'virtual'", "'void'", "'('", 
		"')'", "'<'", "'>'", "'*'", "'&'", "'~'", "':'", "','", "'`'", "'''", 
		"'\"'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "Bool", "CDecl", "CLRCall", "Char", "Class", "Const", 
		"DeclTypeAuto", "Enum", "FastCall", "Float", "Int", "Int64", "Long", "ScalarDeletingDestructor", 
		"Short", "Signed", "Static", "StdCall", "Struct", "ThisCall", "Union", 
		"Unsigned", "VectorCall", "Virtual", "Void", "LeftParen", "RightParen", 
		"Less", "Greater", "Star", "And", "Tilde", "Colon", "Comma", "BackTick", 
		"SingleQuote", "DoubleQuote", "LeftBrace", "RightBrace", "LeftBracket", 
		"RightBracket", "Identifier", "Number", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DemangledNames.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DemangledNamesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DemangledNamesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DemangledNamesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrefixContext functionPrefix() {
			return GetRuleContext<FunctionPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypeContext functionReturnType() {
			return GetRuleContext<FunctionReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VcSpecificModiferContext vcSpecificModifer() {
			return GetRuleContext<VcSpecificModiferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclaringScopeContext functionDeclaringScope() {
			return GetRuleContext<FunctionDeclaringScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(DemangledNamesParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(DemangledNamesParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSuffixContext functionSuffix() {
			return GetRuleContext<FunctionSuffixContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 0, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			functionPrefix();
			State = 37;
			functionReturnType();
			State = 38;
			vcSpecificModifer();
			State = 39;
			functionDeclaringScope();
			State = 40;
			functionName();
			State = 41;
			Match(LeftParen);
			State = 42;
			functionParameters();
			State = 43;
			Match(RightParen);
			State = 44;
			functionSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(DemangledNamesParser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(DemangledNamesParser.Static, 0); }
		public FunctionPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrefixContext functionPrefix() {
		FunctionPrefixContext _localctx = new FunctionPrefixContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionPrefix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0)) {
				{
				State = 46;
				accessModifier();
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static || _la==Virtual) {
				{
				State = 49;
				_la = TokenStream.LA(1);
				if ( !(_la==Static || _la==Virtual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		public FunctionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSuffixContext functionSuffix() {
		FunctionSuffixContext _localctx = new FunctionSuffixContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 52;
				Match(Const);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnTypeContext functionReturnType() {
		FunctionReturnTypeContext _localctx = new FunctionReturnTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionReturnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 55;
				type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclaringScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DemangledNamesParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DemangledNamesParser.Colon, i);
		}
		public FunctionDeclaringScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaringScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaringScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaringScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaringScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclaringScopeContext functionDeclaringScope() {
		FunctionDeclaringScopeContext _localctx = new FunctionDeclaringScopeContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDeclaringScope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 58;
				typeIdentifier(0);
				State = 59;
				Match(Colon);
				State = 60;
				Match(Colon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(DemangledNamesParser.And, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			type();
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 65;
				Match(Const);
				}
			}

			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==And) {
				{
				State = 68;
				Match(And);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DemangledNamesParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DemangledNamesParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionParameters);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case Char:
			case Class:
			case DeclTypeAuto:
			case Float:
			case Int:
			case Int64:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Unsigned:
			case Void:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				functionParameter();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 72;
					Match(Comma);
					State = 73;
					functionParameter();
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplaceParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(DemangledNamesParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(DemangledNamesParser.Number, 0); }
		public TemplaceParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templaceParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTemplaceParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTemplaceParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplaceParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplaceParameterContext templaceParameter() {
		TemplaceParameterContext _localctx = new TemplaceParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_templaceParameter);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
			case Char:
			case Class:
			case DeclTypeAuto:
			case Float:
			case Int:
			case Int64:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Unsigned:
			case Void:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				type();
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 83;
					Match(Const);
					}
				}

				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==And) {
					{
					State = 86;
					Match(And);
					}
				}

				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				Match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(DemangledNamesParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplaceParameterContext[] templaceParameter() {
			return GetRuleContexts<TemplaceParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplaceParameterContext templaceParameter(int i) {
			return GetRuleContext<TemplaceParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(DemangledNamesParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DemangledNamesParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DemangledNamesParser.Comma, i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 16, RULE_template);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				Match(Less);
				State = 93;
				templaceParameter();
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 94;
					Match(Comma);
					State = 95;
					templaceParameter();
					}
					}
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 101;
				Match(Greater);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				Match(Less);
				State = 104;
				Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateNotNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(DemangledNamesParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplaceParameterContext[] templaceParameter() {
			return GetRuleContexts<TemplaceParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplaceParameterContext templaceParameter(int i) {
			return GetRuleContext<TemplaceParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(DemangledNamesParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DemangledNamesParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DemangledNamesParser.Comma, i);
		}
		public TemplateNotNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateNotNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTemplateNotNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTemplateNotNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateNotNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateNotNullContext templateNotNull() {
		TemplateNotNullContext _localctx = new TemplateNotNullContext(Context, State);
		EnterRule(_localctx, 18, RULE_templateNotNull);
		int _la;
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				Match(Less);
				State = 109;
				templaceParameter();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 110;
					Match(Comma);
					State = 111;
					templaceParameter();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 117;
				Match(Greater);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(Less);
				State = 120;
				Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(DemangledNamesParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(DemangledNamesParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateNotNullContext[] templateNotNull() {
			return GetRuleContexts<TemplateNotNullContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateNotNullContext templateNotNull(int i) {
			return GetRuleContext<TemplateNotNullContext>(i);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionName);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				functionIdentifier();
				State = 124;
				template();
				{
				State = 125;
				Match(LeftBracket);
				State = 126;
				Match(RightBracket);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				functionIdentifier();
				State = 129;
				templateNotNull();
				State = 130;
				templateNotNull();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				functionIdentifier();
				State = 133;
				template();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DemangledNamesParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(DemangledNamesParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ScalarDeletingDestructor() { return GetToken(DemangledNamesParser.ScalarDeletingDestructor, 0); }
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionIdentifierContext functionIdentifier() {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionIdentifier);
		int _la;
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Tilde:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Tilde) {
					{
					State = 137;
					Match(Tilde);
					}
				}

				State = 140;
				Match(Identifier);
				}
				break;
			case ScalarDeletingDestructor:
				EnterOuterAlt(_localctx, 2);
				{
				State = 141;
				Match(ScalarDeletingDestructor);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(DemangledNamesParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(DemangledNamesParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(DemangledNamesParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(DemangledNamesParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(DemangledNamesParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(DemangledNamesParser.And, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Class || _la==Struct) {
				{
				State = 144;
				_la = TokenStream.LA(1);
				if ( !(_la==Class || _la==Struct) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 147;
			typeIdentifier(0);
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 148;
				Match(Const);
				}
				break;
			}
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 151;
					_la = TokenStream.LA(1);
					if ( !(_la==Star || _la==And) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(DemangledNamesParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclTypeAuto() { return GetToken(DemangledNamesParser.DeclTypeAuto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DemangledNamesParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DemangledNamesParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DemangledNamesParser.Colon, i);
		}
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		return typeIdentifier(0);
	}

	private TypeIdentifierContext typeIdentifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, _parentState);
		TypeIdentifierContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_typeIdentifier, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				{
				State = 158;
				Match(Void);
				}
				break;
			case DeclTypeAuto:
				{
				State = 159;
				Match(DeclTypeAuto);
				}
				break;
			case Bool:
			case Char:
			case Float:
			case Int:
			case Int64:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
				{
				State = 160;
				numericType();
				}
				break;
			case Identifier:
				{
				State = 161;
				Match(Identifier);
				State = 162;
				template();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeIdentifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeIdentifier);
					State = 165;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 166;
					Match(Colon);
					State = 167;
					Match(Colon);
					State = 168;
					Match(Identifier);
					State = 169;
					template();
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DemangledNamesParser.Colon, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_accessModifier);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(T__0);
				State = 176;
				Match(Colon);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				Match(T__1);
				State = 178;
				Match(Colon);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179;
				Match(T__2);
				State = 180;
				Match(Colon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcSpecificModiferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDecl() { return GetToken(DemangledNamesParser.CDecl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLRCall() { return GetToken(DemangledNamesParser.CLRCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StdCall() { return GetToken(DemangledNamesParser.StdCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FastCall() { return GetToken(DemangledNamesParser.FastCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ThisCall() { return GetToken(DemangledNamesParser.ThisCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VectorCall() { return GetToken(DemangledNamesParser.VectorCall, 0); }
		public VcSpecificModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcSpecificModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcSpecificModifer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VcSpecificModiferContext vcSpecificModifer() {
		VcSpecificModiferContext _localctx = new VcSpecificModiferContext(Context, State);
		EnterRule(_localctx, 30, RULE_vcSpecificModifer);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CDecl:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				Match(CDecl);
				}
				break;
			case CLRCall:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				Match(CLRCall);
				}
				break;
			case StdCall:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				Match(StdCall);
				}
				break;
			case FastCall:
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				Match(FastCall);
				}
				break;
			case ThisCall:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				Match(ThisCall);
				}
				break;
			case VectorCall:
				EnterOuterAlt(_localctx, 6);
				{
				State = 188;
				Match(VectorCall);
				}
				break;
			case Bool:
			case Char:
			case DeclTypeAuto:
			case Float:
			case Int:
			case Int64:
			case Long:
			case ScalarDeletingDestructor:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Tilde:
			case Identifier:
				EnterOuterAlt(_localctx, 7);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(DemangledNamesParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(DemangledNamesParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(DemangledNamesParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(DemangledNamesParser.Signed, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 32, RULE_numericType);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(Bool);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				Match(Float);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194;
				Match(Unsigned);
				State = 195;
				integerType();
				}
				break;
			case Signed:
				EnterOuterAlt(_localctx, 4);
				{
				State = 196;
				Match(Signed);
				State = 197;
				integerType();
				}
				break;
			case Char:
			case Int:
			case Int64:
			case Long:
			case Short:
				EnterOuterAlt(_localctx, 5);
				{
				State = 198;
				integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(DemangledNamesParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(DemangledNamesParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(DemangledNamesParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64() { return GetToken(DemangledNamesParser.Int64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(DemangledNamesParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(DemangledNamesParser.Long, i);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_integerType);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				Match(Char);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				Match(Short);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				Match(Int);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204;
				Match(Int64);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				Match(Long);
				State = 206;
				Match(Long);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 207;
				Match(Long);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return typeIdentifier_sempred((TypeIdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeIdentifier_sempred(TypeIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,48,211,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,1,3,1,48,8,1,1,1,3,1,51,8,1,1,2,3,2,54,8,2,1,3,3,3,57,8,3,1,4,1,4,1,
		4,1,4,3,4,63,8,4,1,5,1,5,3,5,67,8,5,1,5,3,5,70,8,5,1,6,1,6,1,6,5,6,75,
		8,6,10,6,12,6,78,9,6,1,6,3,6,81,8,6,1,7,1,7,3,7,85,8,7,1,7,3,7,88,8,7,
		1,7,3,7,91,8,7,1,8,1,8,1,8,1,8,5,8,97,8,8,10,8,12,8,100,9,8,1,8,1,8,1,
		8,1,8,1,8,3,8,107,8,8,1,9,1,9,1,9,1,9,5,9,113,8,9,10,9,12,9,116,9,9,1,
		9,1,9,1,9,1,9,3,9,122,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,3,10,136,8,10,1,11,3,11,139,8,11,1,11,1,11,3,11,143,8,11,
		1,12,3,12,146,8,12,1,12,1,12,3,12,150,8,12,1,12,5,12,153,8,12,10,12,12,
		12,156,9,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,164,8,13,1,13,1,13,1,13,
		1,13,1,13,5,13,171,8,13,10,13,12,13,174,9,13,1,14,1,14,1,14,1,14,1,14,
		1,14,3,14,182,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,191,8,15,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,200,8,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,3,17,209,8,17,1,17,0,1,26,18,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,0,3,2,0,20,20,27,27,2,0,8,8,22,22,1,0,33,34,237,0,36,
		1,0,0,0,2,47,1,0,0,0,4,53,1,0,0,0,6,56,1,0,0,0,8,62,1,0,0,0,10,64,1,0,
		0,0,12,80,1,0,0,0,14,90,1,0,0,0,16,106,1,0,0,0,18,121,1,0,0,0,20,135,1,
		0,0,0,22,142,1,0,0,0,24,145,1,0,0,0,26,163,1,0,0,0,28,181,1,0,0,0,30,190,
		1,0,0,0,32,199,1,0,0,0,34,208,1,0,0,0,36,37,3,2,1,0,37,38,3,6,3,0,38,39,
		3,30,15,0,39,40,3,8,4,0,40,41,3,20,10,0,41,42,5,29,0,0,42,43,3,12,6,0,
		43,44,5,30,0,0,44,45,3,4,2,0,45,1,1,0,0,0,46,48,3,28,14,0,47,46,1,0,0,
		0,47,48,1,0,0,0,48,50,1,0,0,0,49,51,7,0,0,0,50,49,1,0,0,0,50,51,1,0,0,
		0,51,3,1,0,0,0,52,54,5,9,0,0,53,52,1,0,0,0,53,54,1,0,0,0,54,5,1,0,0,0,
		55,57,3,24,12,0,56,55,1,0,0,0,56,57,1,0,0,0,57,7,1,0,0,0,58,59,3,26,13,
		0,59,60,5,36,0,0,60,61,5,36,0,0,61,63,1,0,0,0,62,58,1,0,0,0,62,63,1,0,
		0,0,63,9,1,0,0,0,64,66,3,24,12,0,65,67,5,9,0,0,66,65,1,0,0,0,66,67,1,0,
		0,0,67,69,1,0,0,0,68,70,5,34,0,0,69,68,1,0,0,0,69,70,1,0,0,0,70,11,1,0,
		0,0,71,76,3,10,5,0,72,73,5,37,0,0,73,75,3,10,5,0,74,72,1,0,0,0,75,78,1,
		0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,81,1,0,0,0,78,76,1,0,0,0,79,81,1,
		0,0,0,80,71,1,0,0,0,80,79,1,0,0,0,81,13,1,0,0,0,82,84,3,24,12,0,83,85,
		5,9,0,0,84,83,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,88,5,34,0,0,87,86,
		1,0,0,0,87,88,1,0,0,0,88,91,1,0,0,0,89,91,5,46,0,0,90,82,1,0,0,0,90,89,
		1,0,0,0,91,15,1,0,0,0,92,93,5,31,0,0,93,98,3,14,7,0,94,95,5,37,0,0,95,
		97,3,14,7,0,96,94,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,
		101,1,0,0,0,100,98,1,0,0,0,101,102,5,32,0,0,102,107,1,0,0,0,103,104,5,
		31,0,0,104,107,5,32,0,0,105,107,1,0,0,0,106,92,1,0,0,0,106,103,1,0,0,0,
		106,105,1,0,0,0,107,17,1,0,0,0,108,109,5,31,0,0,109,114,3,14,7,0,110,111,
		5,37,0,0,111,113,3,14,7,0,112,110,1,0,0,0,113,116,1,0,0,0,114,112,1,0,
		0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,5,32,0,0,118,
		122,1,0,0,0,119,120,5,31,0,0,120,122,5,32,0,0,121,108,1,0,0,0,121,119,
		1,0,0,0,122,19,1,0,0,0,123,124,3,22,11,0,124,125,3,16,8,0,125,126,5,43,
		0,0,126,127,5,44,0,0,127,136,1,0,0,0,128,129,3,22,11,0,129,130,3,18,9,
		0,130,131,3,18,9,0,131,136,1,0,0,0,132,133,3,22,11,0,133,134,3,16,8,0,
		134,136,1,0,0,0,135,123,1,0,0,0,135,128,1,0,0,0,135,132,1,0,0,0,136,21,
		1,0,0,0,137,139,5,35,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,
		0,140,143,5,45,0,0,141,143,5,17,0,0,142,138,1,0,0,0,142,141,1,0,0,0,143,
		23,1,0,0,0,144,146,7,1,0,0,145,144,1,0,0,0,145,146,1,0,0,0,146,147,1,0,
		0,0,147,149,3,26,13,0,148,150,5,9,0,0,149,148,1,0,0,0,149,150,1,0,0,0,
		150,154,1,0,0,0,151,153,7,2,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,
		1,0,0,0,154,155,1,0,0,0,155,25,1,0,0,0,156,154,1,0,0,0,157,158,6,13,-1,
		0,158,164,5,28,0,0,159,164,5,10,0,0,160,164,3,32,16,0,161,162,5,45,0,0,
		162,164,3,16,8,0,163,157,1,0,0,0,163,159,1,0,0,0,163,160,1,0,0,0,163,161,
		1,0,0,0,164,172,1,0,0,0,165,166,10,2,0,0,166,167,5,36,0,0,167,168,5,36,
		0,0,168,169,5,45,0,0,169,171,3,16,8,0,170,165,1,0,0,0,171,174,1,0,0,0,
		172,170,1,0,0,0,172,173,1,0,0,0,173,27,1,0,0,0,174,172,1,0,0,0,175,176,
		5,1,0,0,176,182,5,36,0,0,177,178,5,2,0,0,178,182,5,36,0,0,179,180,5,3,
		0,0,180,182,5,36,0,0,181,175,1,0,0,0,181,177,1,0,0,0,181,179,1,0,0,0,182,
		29,1,0,0,0,183,191,5,5,0,0,184,191,5,6,0,0,185,191,5,21,0,0,186,191,5,
		12,0,0,187,191,5,23,0,0,188,191,5,26,0,0,189,191,1,0,0,0,190,183,1,0,0,
		0,190,184,1,0,0,0,190,185,1,0,0,0,190,186,1,0,0,0,190,187,1,0,0,0,190,
		188,1,0,0,0,190,189,1,0,0,0,191,31,1,0,0,0,192,200,5,4,0,0,193,200,5,13,
		0,0,194,195,5,25,0,0,195,200,3,34,17,0,196,197,5,19,0,0,197,200,3,34,17,
		0,198,200,3,34,17,0,199,192,1,0,0,0,199,193,1,0,0,0,199,194,1,0,0,0,199,
		196,1,0,0,0,199,198,1,0,0,0,200,33,1,0,0,0,201,209,5,7,0,0,202,209,5,18,
		0,0,203,209,5,14,0,0,204,209,5,15,0,0,205,206,5,16,0,0,206,209,5,16,0,
		0,207,209,5,16,0,0,208,201,1,0,0,0,208,202,1,0,0,0,208,203,1,0,0,0,208,
		204,1,0,0,0,208,205,1,0,0,0,208,207,1,0,0,0,209,35,1,0,0,0,28,47,50,53,
		56,62,66,69,76,80,84,87,90,98,106,114,121,135,138,142,145,149,154,163,
		172,181,190,199,208
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AssetRipper.Translation.LlvmIR

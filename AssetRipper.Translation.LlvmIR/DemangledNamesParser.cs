//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:/repos/AssetRipper.Translation.LlvmIR/AssetRipper.Translation.LlvmIR/DemangledNames.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AssetRipper.Translation.LlvmIR {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class DemangledNamesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, EscapedString=8, 
		Bool=9, CDecl=10, CLRCall=11, Char=12, Class=13, Const=14, DeclTypeAuto=15, 
		Enum=16, FastCall=17, Float=18, Int=19, Int64=20, Long=21, Short=22, Signed=23, 
		Static=24, StdCall=25, Struct=26, ThisCall=27, Union=28, Unsigned=29, 
		VectorCall=30, Virtual=31, Void=32, LeftParen=33, RightParen=34, Less=35, 
		Greater=36, Equals=37, Plus=38, Minus=39, Star=40, Slash=41, Modulo=42, 
		And=43, Pipe=44, Caret=45, Tilde=46, Exclamation=47, Colon=48, Comma=49, 
		BackTick=50, SingleQuote=51, DoubleQuote=52, LeftBrace=53, RightBrace=54, 
		LeftBracket=55, RightBracket=56, Identifier=57, Number=58, Whitespace=59, 
		Newline=60;
	public const int
		RULE_function = 0, RULE_functionPrefix = 1, RULE_functionSuffix = 2, RULE_functionReturnType = 3, 
		RULE_functionDeclaringScope = 4, RULE_functionParameter = 5, RULE_functionParameters = 6, 
		RULE_templateParameter = 7, RULE_template = 8, RULE_templateNotNull = 9, 
		RULE_functionName = 10, RULE_identifier = 11, RULE_functionIdentifier = 12, 
		RULE_type = 13, RULE_typeIdentifier = 14, RULE_qualifiedTypeIdentifier = 15, 
		RULE_accessModifier = 16, RULE_vcSpecificModifer = 17, RULE_numericType = 18, 
		RULE_integerType = 19, RULE_operator = 20, RULE_operatorName = 21, RULE_arithmeticOperator = 22, 
		RULE_relationalOperator = 23, RULE_logicalOperator = 24, RULE_shiftOperator = 25;
	public static readonly string[] ruleNames = {
		"function", "functionPrefix", "functionSuffix", "functionReturnType", 
		"functionDeclaringScope", "functionParameter", "functionParameters", "templateParameter", 
		"template", "templateNotNull", "functionName", "identifier", "functionIdentifier", 
		"type", "typeIdentifier", "qualifiedTypeIdentifier", "accessModifier", 
		"vcSpecificModifer", "numericType", "integerType", "operator", "operatorName", 
		"arithmeticOperator", "relationalOperator", "logicalOperator", "shiftOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_Static'", "'public'", "'protected'", "'private'", "'operator'", 
		"'new'", "'delete'", null, "'bool'", "'__cdecl'", "'__clrcall'", "'char'", 
		"'class'", "'const'", "'decltype(auto)'", "'enum'", "'__fastcall'", "'float'", 
		"'int'", "'__int64'", "'long'", "'short'", "'signed'", "'static'", "'__stdcall'", 
		"'struct'", "'__thiscall'", "'union'", "'unsigned'", "'__vectorcall'", 
		"'virtual'", "'void'", "'('", "')'", "'<'", "'>'", "'='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'&'", "'|'", "'^'", "'~'", "'!'", "':'", "','", 
		"'`'", "'''", "'\"'", "'{'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "EscapedString", "Bool", 
		"CDecl", "CLRCall", "Char", "Class", "Const", "DeclTypeAuto", "Enum", 
		"FastCall", "Float", "Int", "Int64", "Long", "Short", "Signed", "Static", 
		"StdCall", "Struct", "ThisCall", "Union", "Unsigned", "VectorCall", "Virtual", 
		"Void", "LeftParen", "RightParen", "Less", "Greater", "Equals", "Plus", 
		"Minus", "Star", "Slash", "Modulo", "And", "Pipe", "Caret", "Tilde", "Exclamation", 
		"Colon", "Comma", "BackTick", "SingleQuote", "DoubleQuote", "LeftBrace", 
		"RightBrace", "LeftBracket", "RightBracket", "Identifier", "Number", "Whitespace", 
		"Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DemangledNames.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DemangledNamesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DemangledNamesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DemangledNamesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionPrefixContext functionPrefix() {
			return GetRuleContext<FunctionPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionReturnTypeContext functionReturnType() {
			return GetRuleContext<FunctionReturnTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VcSpecificModiferContext vcSpecificModifer() {
			return GetRuleContext<VcSpecificModiferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclaringScopeContext functionDeclaringScope() {
			return GetRuleContext<FunctionDeclaringScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(DemangledNamesParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(DemangledNamesParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSuffixContext functionSuffix() {
			return GetRuleContext<FunctionSuffixContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 0, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			functionPrefix();
			State = 53;
			functionReturnType();
			State = 54;
			vcSpecificModifer();
			State = 55;
			functionDeclaringScope();
			State = 56;
			functionName();
			State = 57;
			Match(LeftParen);
			State = 58;
			functionParameters();
			State = 59;
			Match(RightParen);
			State = 60;
			functionSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Virtual() { return GetToken(DemangledNamesParser.Virtual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(DemangledNamesParser.Static, 0); }
		public FunctionPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionPrefixContext functionPrefix() {
		FunctionPrefixContext _localctx = new FunctionPrefixContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionPrefix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) {
				{
				State = 62;
				accessModifier();
				}
			}

			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Static || _la==Virtual) {
				{
				State = 65;
				_la = TokenStream.LA(1);
				if ( !(_la==Static || _la==Virtual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		public FunctionSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSuffixContext functionSuffix() {
		FunctionSuffixContext _localctx = new FunctionSuffixContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 68;
				Match(Const);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionReturnTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FunctionReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionReturnType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionReturnType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionReturnType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionReturnTypeContext functionReturnType() {
		FunctionReturnTypeContext _localctx = new FunctionReturnTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionReturnType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115227619603200L) != 0)) {
				{
				State = 71;
				type(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclaringScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedTypeIdentifierContext qualifiedTypeIdentifier() {
			return GetRuleContext<QualifiedTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DemangledNamesParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DemangledNamesParser.Colon, i);
		}
		public FunctionDeclaringScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaringScope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaringScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaringScope(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaringScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclaringScopeContext functionDeclaringScope() {
		FunctionDeclaringScopeContext _localctx = new FunctionDeclaringScopeContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDeclaringScope);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 74;
				qualifiedTypeIdentifier(0);
				State = 75;
				Match(Colon);
				State = 76;
				Match(Colon);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(DemangledNamesParser.And, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			type(0);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Const) {
				{
				State = 81;
				Match(Const);
				}
			}

			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==And) {
				{
				State = 84;
				Match(And);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DemangledNamesParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DemangledNamesParser.Comma, i);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParametersContext functionParameters() {
		FunctionParametersContext _localctx = new FunctionParametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionParameters);
		int _la;
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EscapedString:
			case Bool:
			case Char:
			case Class:
			case DeclTypeAuto:
			case Enum:
			case Float:
			case Int:
			case Int64:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Union:
			case Unsigned:
			case Void:
			case Less:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				functionParameter();
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 88;
					Match(Comma);
					State = 89;
					functionParameter();
					}
					}
					State = 94;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case RightParen:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(DemangledNamesParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(DemangledNamesParser.Number, 0); }
		public TemplateParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTemplateParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTemplateParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParameterContext templateParameter() {
		TemplateParameterContext _localctx = new TemplateParameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_templateParameter);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EscapedString:
			case Bool:
			case Char:
			case Class:
			case DeclTypeAuto:
			case Enum:
			case Float:
			case Int:
			case Int64:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case Union:
			case Unsigned:
			case Void:
			case Less:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				type(0);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Const) {
					{
					State = 99;
					Match(Const);
					}
				}

				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==And) {
					{
					State = 102;
					Match(And);
					}
				}

				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				Match(Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(DemangledNamesParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext[] templateParameter() {
			return GetRuleContexts<TemplateParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext templateParameter(int i) {
			return GetRuleContext<TemplateParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(DemangledNamesParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DemangledNamesParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DemangledNamesParser.Comma, i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 16, RULE_template);
		int _la;
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				Match(Less);
				State = 109;
				templateParameter();
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 110;
					Match(Comma);
					State = 111;
					templateParameter();
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 117;
				Match(Greater);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(Less);
				State = 120;
				Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateNotNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(DemangledNamesParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext[] templateParameter() {
			return GetRuleContexts<TemplateParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateParameterContext templateParameter(int i) {
			return GetRuleContext<TemplateParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(DemangledNamesParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(DemangledNamesParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(DemangledNamesParser.Comma, i);
		}
		public TemplateNotNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateNotNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTemplateNotNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTemplateNotNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateNotNull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateNotNullContext templateNotNull() {
		TemplateNotNullContext _localctx = new TemplateNotNullContext(Context, State);
		EnterRule(_localctx, 18, RULE_templateNotNull);
		int _la;
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(Less);
				State = 125;
				templateParameter();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 126;
					Match(Comma);
					State = 127;
					templateParameter();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				Match(Greater);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(Less);
				State = 136;
				Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(DemangledNamesParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(DemangledNamesParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateNotNullContext[] templateNotNull() {
			return GetRuleContexts<TemplateNotNullContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateNotNullContext templateNotNull(int i) {
			return GetRuleContext<TemplateNotNullContext>(i);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionName);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				functionIdentifier();
				State = 140;
				template();
				{
				State = 141;
				Match(LeftBracket);
				State = 142;
				Match(RightBracket);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				functionIdentifier();
				State = 145;
				templateNotNull();
				State = 146;
				templateNotNull();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				functionIdentifier();
				State = 149;
				template();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(DemangledNamesParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapedString() { return GetToken(DemangledNamesParser.EscapedString, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !(_la==EscapedString || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(DemangledNamesParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SingleQuote() { return GetTokens(DemangledNamesParser.SingleQuote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleQuote(int i) {
			return GetToken(DemangledNamesParser.SingleQuote, i);
		}
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionIdentifierContext functionIdentifier() {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionIdentifier);
		int _la;
		try {
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155;
				@operator();
				}
				break;
			case EscapedString:
			case Tilde:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Tilde) {
					{
					State = 156;
					Match(Tilde);
					}
				}

				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 159;
					identifier();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EscapedString || _la==Identifier );
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				Match(T__0);
				State = 165;
				Match(SingleQuote);
				State = 166;
				Match(SingleQuote);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedTypeIdentifierContext qualifiedTypeIdentifier() {
			return GetRuleContext<QualifiedTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(DemangledNamesParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Class() { return GetToken(DemangledNamesParser.Class, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(DemangledNamesParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(DemangledNamesParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(DemangledNamesParser.Union, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(DemangledNamesParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(DemangledNamesParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(DemangledNamesParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(DemangledNamesParser.And, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(DemangledNamesParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(DemangledNamesParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(DemangledNamesParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(DemangledNamesParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(DemangledNamesParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(DemangledNamesParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(DemangledNamesParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcSpecificModiferContext vcSpecificModifer() {
			return GetRuleContext<VcSpecificModiferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParametersContext functionParameters() {
			return GetRuleContext<FunctionParametersContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 335618048L) != 0)) {
				{
				State = 170;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 335618048L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 173;
			qualifiedTypeIdentifier(0);
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 174;
				Match(Const);
				}
				break;
			}
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 177;
					_la = TokenStream.LA(1);
					if ( !(_la==Star || _la==And) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 213;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 211;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 183;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 184;
						Match(LeftParen);
						State = 185;
						Match(Star);
						State = 186;
						Match(Const);
						State = 187;
						Match(RightParen);
						State = 188;
						Match(LeftBracket);
						State = 189;
						Match(Number);
						State = 190;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 191;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 192;
						Match(LeftParen);
						State = 193;
						Match(And);
						State = 194;
						Match(RightParen);
						State = 195;
						Match(LeftBracket);
						State = 196;
						Match(Number);
						State = 197;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 198;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 199;
						Match(LeftBracket);
						State = 200;
						Match(Number);
						State = 201;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new TypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 202;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 203;
						Match(LeftParen);
						State = 204;
						vcSpecificModifer();
						State = 205;
						Match(Star);
						State = 206;
						Match(RightParen);
						State = 207;
						Match(LeftParen);
						State = 208;
						functionParameters();
						State = 209;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(DemangledNamesParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DeclTypeAuto() { return GetToken(DemangledNamesParser.DeclTypeAuto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateContext template() {
			return GetRuleContext<TemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(DemangledNamesParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(DemangledNamesParser.Greater, 0); }
		public TypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdentifierContext typeIdentifier() {
		TypeIdentifierContext _localctx = new TypeIdentifierContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeIdentifier);
		int _la;
		try {
			int _alt;
			State = 234;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Void:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				Match(Void);
				}
				break;
			case DeclTypeAuto:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				Match(DeclTypeAuto);
				}
				break;
			case Bool:
			case Char:
			case Float:
			case Int:
			case Int64:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218;
				numericType();
				}
				break;
			case EscapedString:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 219;
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 222;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 224;
				template();
				}
				break;
			case Less:
				EnterOuterAlt(_localctx, 5);
				{
				State = 226;
				Match(Less);
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 227;
					identifier();
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EscapedString || _la==Identifier );
				State = 232;
				Match(Greater);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedTypeIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeIdentifierContext typeIdentifier() {
			return GetRuleContext<TypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedTypeIdentifierContext qualifiedTypeIdentifier() {
			return GetRuleContext<QualifiedTypeIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(DemangledNamesParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(DemangledNamesParser.Colon, i);
		}
		public QualifiedTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedTypeIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterQualifiedTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitQualifiedTypeIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedTypeIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedTypeIdentifierContext qualifiedTypeIdentifier() {
		return qualifiedTypeIdentifier(0);
	}

	private QualifiedTypeIdentifierContext qualifiedTypeIdentifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		QualifiedTypeIdentifierContext _localctx = new QualifiedTypeIdentifierContext(Context, _parentState);
		QualifiedTypeIdentifierContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_qualifiedTypeIdentifier, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 237;
			typeIdentifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedTypeIdentifierContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_qualifiedTypeIdentifier);
					State = 239;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 240;
					Match(Colon);
					State = 241;
					Match(Colon);
					State = 242;
					typeIdentifier();
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(DemangledNamesParser.Colon, 0); }
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_accessModifier);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248;
				Match(T__1);
				State = 249;
				Match(Colon);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				Match(T__2);
				State = 251;
				Match(Colon);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				Match(T__3);
				State = 253;
				Match(Colon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcSpecificModiferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDecl() { return GetToken(DemangledNamesParser.CDecl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLRCall() { return GetToken(DemangledNamesParser.CLRCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StdCall() { return GetToken(DemangledNamesParser.StdCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FastCall() { return GetToken(DemangledNamesParser.FastCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ThisCall() { return GetToken(DemangledNamesParser.ThisCall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VectorCall() { return GetToken(DemangledNamesParser.VectorCall, 0); }
		public VcSpecificModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcSpecificModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVcSpecificModifer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VcSpecificModiferContext vcSpecificModifer() {
		VcSpecificModiferContext _localctx = new VcSpecificModiferContext(Context, State);
		EnterRule(_localctx, 34, RULE_vcSpecificModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1241648128L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(DemangledNamesParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(DemangledNamesParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(DemangledNamesParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerTypeContext integerType() {
			return GetRuleContext<IntegerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(DemangledNamesParser.Signed, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext numericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_numericType);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Bool:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				Match(Bool);
				}
				break;
			case Float:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				Match(Float);
				}
				break;
			case Unsigned:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				Match(Unsigned);
				State = 261;
				integerType();
				}
				break;
			case Signed:
				EnterOuterAlt(_localctx, 4);
				{
				State = 262;
				Match(Signed);
				State = 263;
				integerType();
				}
				break;
			case Char:
			case Int:
			case Int64:
			case Long:
			case Short:
				EnterOuterAlt(_localctx, 5);
				{
				State = 264;
				integerType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(DemangledNamesParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(DemangledNamesParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(DemangledNamesParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64() { return GetToken(DemangledNamesParser.Int64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Long() { return GetTokens(DemangledNamesParser.Long); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long(int i) {
			return GetToken(DemangledNamesParser.Long, i);
		}
		public IntegerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitIntegerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerTypeContext integerType() {
		IntegerTypeContext _localctx = new IntegerTypeContext(Context, State);
		EnterRule(_localctx, 38, RULE_integerType);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				Match(Char);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				Match(Short);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269;
				Match(Int);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 270;
				Match(Int64);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 271;
				Match(Long);
				State = 272;
				Match(Long);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 273;
				Match(Long);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorNameContext operatorName() {
			return GetRuleContext<OperatorNameContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(T__4);
			State = 277;
			operatorName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(DemangledNamesParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(DemangledNamesParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorContext shiftOperator() {
			return GetRuleContext<ShiftOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(DemangledNamesParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperatorContext arithmeticOperator() {
			return GetRuleContext<ArithmeticOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalOperatorContext relationalOperator() {
			return GetRuleContext<RelationalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(DemangledNamesParser.Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(DemangledNamesParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(DemangledNamesParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(DemangledNamesParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(DemangledNamesParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(DemangledNamesParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(DemangledNamesParser.RightParen, 0); }
		public OperatorNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterOperatorName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitOperatorName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorNameContext operatorName() {
		OperatorNameContext _localctx = new OperatorNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_operatorName);
		int _la;
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(T__5);
				State = 280;
				Match(LeftBracket);
				State = 281;
				Match(RightBracket);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				Match(T__6);
				State = 283;
				Match(LeftBracket);
				State = 284;
				Match(RightBracket);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				Match(T__5);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286;
				Match(T__6);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 287;
				numericType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 288;
				shiftOperator();
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 289;
					Match(Equals);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 292;
				arithmeticOperator();
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 293;
					Match(Equals);
					}
				}

				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 296;
				logicalOperator();
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 297;
					Match(Equals);
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 300;
				relationalOperator();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 301;
				Match(Exclamation);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 302;
				Match(Equals);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 303;
				Match(Plus);
				State = 304;
				Match(Plus);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 305;
				Match(Minus);
				State = 306;
				Match(Minus);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 307;
				Match(LeftBracket);
				State = 308;
				Match(RightBracket);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 309;
				Match(LeftParen);
				State = 310;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(DemangledNamesParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(DemangledNamesParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(DemangledNamesParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(DemangledNamesParser.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(DemangledNamesParser.Modulo, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterArithmeticOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitArithmeticOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperatorContext arithmeticOperator() {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_arithmeticOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8521215115264L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(DemangledNamesParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equals() { return GetTokens(DemangledNamesParser.Equals); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals(int i) {
			return GetToken(DemangledNamesParser.Equals, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(DemangledNamesParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exclamation() { return GetToken(DemangledNamesParser.Exclamation, 0); }
		public RelationalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitRelationalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalOperatorContext relationalOperator() {
		RelationalOperatorContext _localctx = new RelationalOperatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_relationalOperator);
		int _la;
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Less:
				EnterOuterAlt(_localctx, 1);
				{
				State = 315;
				Match(Less);
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 316;
					Match(Equals);
					}
				}

				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319;
				Match(Greater);
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Equals) {
					{
					State = 320;
					Match(Equals);
					}
				}

				}
				break;
			case Equals:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323;
				Match(Equals);
				State = 324;
				Match(Equals);
				}
				break;
			case Exclamation:
				EnterOuterAlt(_localctx, 4);
				{
				State = 325;
				Match(Exclamation);
				State = 326;
				Match(Equals);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(DemangledNamesParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(DemangledNamesParser.Pipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(DemangledNamesParser.Caret, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(DemangledNamesParser.Tilde, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941395333120L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(DemangledNamesParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(DemangledNamesParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(DemangledNamesParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(DemangledNamesParser.Greater, i);
		}
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.EnterShiftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDemangledNamesListener typedListener = listener as IDemangledNamesListener;
			if (typedListener != null) typedListener.ExitShiftOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDemangledNamesVisitor<TResult> typedVisitor = visitor as IDemangledNamesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext shiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_shiftOperator);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Less:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331;
				Match(Less);
				State = 332;
				Match(Less);
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				Match(Greater);
				State = 334;
				Match(Greater);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return type_sempred((TypeContext)_localctx, predIndex);
		case 15: return qualifiedTypeIdentifier_sempred((QualifiedTypeIdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool qualifiedTypeIdentifier_sempred(QualifiedTypeIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,60,338,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
		0,1,0,1,0,1,1,3,1,64,8,1,1,1,3,1,67,8,1,1,2,3,2,70,8,2,1,3,3,3,73,8,3,
		1,4,1,4,1,4,1,4,3,4,79,8,4,1,5,1,5,3,5,83,8,5,1,5,3,5,86,8,5,1,6,1,6,1,
		6,5,6,91,8,6,10,6,12,6,94,9,6,1,6,3,6,97,8,6,1,7,1,7,3,7,101,8,7,1,7,3,
		7,104,8,7,1,7,3,7,107,8,7,1,8,1,8,1,8,1,8,5,8,113,8,8,10,8,12,8,116,9,
		8,1,8,1,8,1,8,1,8,1,8,3,8,123,8,8,1,9,1,9,1,9,1,9,5,9,129,8,9,10,9,12,
		9,132,9,9,1,9,1,9,1,9,1,9,3,9,138,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,3,10,152,8,10,1,11,1,11,1,12,1,12,3,12,158,
		8,12,1,12,4,12,161,8,12,11,12,12,12,162,1,12,1,12,1,12,3,12,168,8,12,1,
		13,1,13,3,13,172,8,13,1,13,1,13,3,13,176,8,13,1,13,5,13,179,8,13,10,13,
		12,13,182,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,5,13,212,8,13,10,13,12,13,215,9,13,1,14,1,14,1,14,1,14,
		4,14,221,8,14,11,14,12,14,222,1,14,1,14,1,14,1,14,4,14,229,8,14,11,14,
		12,14,230,1,14,1,14,3,14,235,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,
		15,244,8,15,10,15,12,15,247,9,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,255,
		8,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,266,8,18,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,3,19,275,8,19,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,291,8,21,1,21,1,21,3,21,295,
		8,21,1,21,1,21,3,21,299,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,3,21,312,8,21,1,22,1,22,1,23,1,23,3,23,318,8,23,1,23,1,23,
		3,23,322,8,23,1,23,1,23,1,23,1,23,3,23,328,8,23,1,24,1,24,1,25,1,25,1,
		25,1,25,3,25,336,8,25,1,25,0,2,26,30,26,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,0,7,2,0,24,24,31,31,2,0,8,8,
		57,57,4,0,13,13,16,16,26,26,28,28,2,0,40,40,43,43,5,0,10,11,17,17,25,25,
		27,27,30,30,1,0,38,42,1,0,43,46,382,0,52,1,0,0,0,2,63,1,0,0,0,4,69,1,0,
		0,0,6,72,1,0,0,0,8,78,1,0,0,0,10,80,1,0,0,0,12,96,1,0,0,0,14,106,1,0,0,
		0,16,122,1,0,0,0,18,137,1,0,0,0,20,151,1,0,0,0,22,153,1,0,0,0,24,167,1,
		0,0,0,26,169,1,0,0,0,28,234,1,0,0,0,30,236,1,0,0,0,32,254,1,0,0,0,34,256,
		1,0,0,0,36,265,1,0,0,0,38,274,1,0,0,0,40,276,1,0,0,0,42,311,1,0,0,0,44,
		313,1,0,0,0,46,327,1,0,0,0,48,329,1,0,0,0,50,335,1,0,0,0,52,53,3,2,1,0,
		53,54,3,6,3,0,54,55,3,34,17,0,55,56,3,8,4,0,56,57,3,20,10,0,57,58,5,33,
		0,0,58,59,3,12,6,0,59,60,5,34,0,0,60,61,3,4,2,0,61,1,1,0,0,0,62,64,3,32,
		16,0,63,62,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,67,7,0,0,0,66,65,1,0,
		0,0,66,67,1,0,0,0,67,3,1,0,0,0,68,70,5,14,0,0,69,68,1,0,0,0,69,70,1,0,
		0,0,70,5,1,0,0,0,71,73,3,26,13,0,72,71,1,0,0,0,72,73,1,0,0,0,73,7,1,0,
		0,0,74,75,3,30,15,0,75,76,5,48,0,0,76,77,5,48,0,0,77,79,1,0,0,0,78,74,
		1,0,0,0,78,79,1,0,0,0,79,9,1,0,0,0,80,82,3,26,13,0,81,83,5,14,0,0,82,81,
		1,0,0,0,82,83,1,0,0,0,83,85,1,0,0,0,84,86,5,43,0,0,85,84,1,0,0,0,85,86,
		1,0,0,0,86,11,1,0,0,0,87,92,3,10,5,0,88,89,5,49,0,0,89,91,3,10,5,0,90,
		88,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,97,1,0,0,0,94,
		92,1,0,0,0,95,97,1,0,0,0,96,87,1,0,0,0,96,95,1,0,0,0,97,13,1,0,0,0,98,
		100,3,26,13,0,99,101,5,14,0,0,100,99,1,0,0,0,100,101,1,0,0,0,101,103,1,
		0,0,0,102,104,5,43,0,0,103,102,1,0,0,0,103,104,1,0,0,0,104,107,1,0,0,0,
		105,107,5,58,0,0,106,98,1,0,0,0,106,105,1,0,0,0,107,15,1,0,0,0,108,109,
		5,35,0,0,109,114,3,14,7,0,110,111,5,49,0,0,111,113,3,14,7,0,112,110,1,
		0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,
		116,114,1,0,0,0,117,118,5,36,0,0,118,123,1,0,0,0,119,120,5,35,0,0,120,
		123,5,36,0,0,121,123,1,0,0,0,122,108,1,0,0,0,122,119,1,0,0,0,122,121,1,
		0,0,0,123,17,1,0,0,0,124,125,5,35,0,0,125,130,3,14,7,0,126,127,5,49,0,
		0,127,129,3,14,7,0,128,126,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,
		131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,36,0,0,134,138,1,
		0,0,0,135,136,5,35,0,0,136,138,5,36,0,0,137,124,1,0,0,0,137,135,1,0,0,
		0,138,19,1,0,0,0,139,140,3,24,12,0,140,141,3,16,8,0,141,142,5,55,0,0,142,
		143,5,56,0,0,143,152,1,0,0,0,144,145,3,24,12,0,145,146,3,18,9,0,146,147,
		3,18,9,0,147,152,1,0,0,0,148,149,3,24,12,0,149,150,3,16,8,0,150,152,1,
		0,0,0,151,139,1,0,0,0,151,144,1,0,0,0,151,148,1,0,0,0,152,21,1,0,0,0,153,
		154,7,1,0,0,154,23,1,0,0,0,155,168,3,40,20,0,156,158,5,46,0,0,157,156,
		1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,161,3,22,11,0,160,159,1,0,
		0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,168,1,0,0,0,164,
		165,5,1,0,0,165,166,5,51,0,0,166,168,5,51,0,0,167,155,1,0,0,0,167,157,
		1,0,0,0,167,164,1,0,0,0,168,25,1,0,0,0,169,171,6,13,-1,0,170,172,7,2,0,
		0,171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,175,3,30,15,0,174,
		176,5,14,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,180,1,0,0,0,177,179,7,
		3,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,
		181,213,1,0,0,0,182,180,1,0,0,0,183,184,10,4,0,0,184,185,5,33,0,0,185,
		186,5,40,0,0,186,187,5,14,0,0,187,188,5,34,0,0,188,189,5,55,0,0,189,190,
		5,58,0,0,190,212,5,56,0,0,191,192,10,3,0,0,192,193,5,33,0,0,193,194,5,
		43,0,0,194,195,5,34,0,0,195,196,5,55,0,0,196,197,5,58,0,0,197,212,5,56,
		0,0,198,199,10,2,0,0,199,200,5,55,0,0,200,201,5,58,0,0,201,212,5,56,0,
		0,202,203,10,1,0,0,203,204,5,33,0,0,204,205,3,34,17,0,205,206,5,40,0,0,
		206,207,5,34,0,0,207,208,5,33,0,0,208,209,3,12,6,0,209,210,5,34,0,0,210,
		212,1,0,0,0,211,183,1,0,0,0,211,191,1,0,0,0,211,198,1,0,0,0,211,202,1,
		0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,27,1,0,0,0,215,
		213,1,0,0,0,216,235,5,32,0,0,217,235,5,15,0,0,218,235,3,36,18,0,219,221,
		3,22,11,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,
		0,0,223,224,1,0,0,0,224,225,3,16,8,0,225,235,1,0,0,0,226,228,5,35,0,0,
		227,229,3,22,11,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,
		231,1,0,0,0,231,232,1,0,0,0,232,233,5,36,0,0,233,235,1,0,0,0,234,216,1,
		0,0,0,234,217,1,0,0,0,234,218,1,0,0,0,234,220,1,0,0,0,234,226,1,0,0,0,
		235,29,1,0,0,0,236,237,6,15,-1,0,237,238,3,28,14,0,238,245,1,0,0,0,239,
		240,10,2,0,0,240,241,5,48,0,0,241,242,5,48,0,0,242,244,3,28,14,0,243,239,
		1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,31,1,0,0,0,
		247,245,1,0,0,0,248,249,5,2,0,0,249,255,5,48,0,0,250,251,5,3,0,0,251,255,
		5,48,0,0,252,253,5,4,0,0,253,255,5,48,0,0,254,248,1,0,0,0,254,250,1,0,
		0,0,254,252,1,0,0,0,255,33,1,0,0,0,256,257,7,4,0,0,257,35,1,0,0,0,258,
		266,5,9,0,0,259,266,5,18,0,0,260,261,5,29,0,0,261,266,3,38,19,0,262,263,
		5,23,0,0,263,266,3,38,19,0,264,266,3,38,19,0,265,258,1,0,0,0,265,259,1,
		0,0,0,265,260,1,0,0,0,265,262,1,0,0,0,265,264,1,0,0,0,266,37,1,0,0,0,267,
		275,5,12,0,0,268,275,5,22,0,0,269,275,5,19,0,0,270,275,5,20,0,0,271,272,
		5,21,0,0,272,275,5,21,0,0,273,275,5,21,0,0,274,267,1,0,0,0,274,268,1,0,
		0,0,274,269,1,0,0,0,274,270,1,0,0,0,274,271,1,0,0,0,274,273,1,0,0,0,275,
		39,1,0,0,0,276,277,5,5,0,0,277,278,3,42,21,0,278,41,1,0,0,0,279,280,5,
		6,0,0,280,281,5,55,0,0,281,312,5,56,0,0,282,283,5,7,0,0,283,284,5,55,0,
		0,284,312,5,56,0,0,285,312,5,6,0,0,286,312,5,7,0,0,287,312,3,36,18,0,288,
		290,3,50,25,0,289,291,5,37,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,312,
		1,0,0,0,292,294,3,44,22,0,293,295,5,37,0,0,294,293,1,0,0,0,294,295,1,0,
		0,0,295,312,1,0,0,0,296,298,3,48,24,0,297,299,5,37,0,0,298,297,1,0,0,0,
		298,299,1,0,0,0,299,312,1,0,0,0,300,312,3,46,23,0,301,312,5,47,0,0,302,
		312,5,37,0,0,303,304,5,38,0,0,304,312,5,38,0,0,305,306,5,39,0,0,306,312,
		5,39,0,0,307,308,5,55,0,0,308,312,5,56,0,0,309,310,5,33,0,0,310,312,5,
		34,0,0,311,279,1,0,0,0,311,282,1,0,0,0,311,285,1,0,0,0,311,286,1,0,0,0,
		311,287,1,0,0,0,311,288,1,0,0,0,311,292,1,0,0,0,311,296,1,0,0,0,311,300,
		1,0,0,0,311,301,1,0,0,0,311,302,1,0,0,0,311,303,1,0,0,0,311,305,1,0,0,
		0,311,307,1,0,0,0,311,309,1,0,0,0,312,43,1,0,0,0,313,314,7,5,0,0,314,45,
		1,0,0,0,315,317,5,35,0,0,316,318,5,37,0,0,317,316,1,0,0,0,317,318,1,0,
		0,0,318,328,1,0,0,0,319,321,5,36,0,0,320,322,5,37,0,0,321,320,1,0,0,0,
		321,322,1,0,0,0,322,328,1,0,0,0,323,324,5,37,0,0,324,328,5,37,0,0,325,
		326,5,47,0,0,326,328,5,37,0,0,327,315,1,0,0,0,327,319,1,0,0,0,327,323,
		1,0,0,0,327,325,1,0,0,0,328,47,1,0,0,0,329,330,7,6,0,0,330,49,1,0,0,0,
		331,332,5,35,0,0,332,336,5,35,0,0,333,334,5,36,0,0,334,336,5,36,0,0,335,
		331,1,0,0,0,335,333,1,0,0,0,336,51,1,0,0,0,40,63,66,69,72,78,82,85,92,
		96,100,103,106,114,122,130,137,151,157,162,167,171,175,180,211,213,222,
		230,234,245,254,265,274,290,294,298,311,317,321,327,335
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AssetRipper.Translation.LlvmIR
